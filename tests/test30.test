#!/usr/bin/env bash

## Test: inherited rules under python logic
echo 1..1

TESTNAME="test30"
TESTDESCRIPTION="inherited rules under python logic"
INPUTDIR="tests/examples/$TESTNAME/input"
OUTPUTDIR="tests/examples/$TESTNAME/output"
EXPECTEDDIR="tests/examples/$TESTNAME/expected"
SNAKEMAKE_UNIT_TESTS="./snakemake_unit_tests.out"
INSTDIR="inst"

SNAKEMAKE_VERSION="$(snakemake --version)"
SNAKEMAKE_TARGET_VERSION="6.0.0"
VERSION_COMPARISON=$(echo -e "${SNAKEMAKE_VERSION}\n${SNAKEMAKE_TARGET_VERSION}" | sort -V | grep -n "${SNAKEMAKE_TARGET_VERSION}" | cut -d":" -f 1)
if [[ "$(echo ${VERSION_COMPARISON} | wc -l)" == "2" ]] || [[ "${VERSION_COMPARISON}" == "2" ]] ; then
    echo "ok 1 - test skipped due to snakemake version < ${SNAKEMAKE_TARGET_VERSION} # SKIP"
    exit 0
fi

## just in case, delete existing output from previously failed tests
rm -Rf "$OUTPUTDIR"

## run test, dumping output into appropriate directory
"$SNAKEMAKE_UNIT_TESTS" --update-all -i "$INSTDIR" -l "$INPUTDIR/run.log" -o "$OUTPUTDIR" -p "$INPUTDIR" -s "$INPUTDIR/workflow/Snakefile" > /dev/null 2>&1
if [[ "$?" != "0" ]] ; then
    echo "not ok - $TESTDESCRIPTION primary run failed"
    exit 0
fi

## compare expected to observed output, ignoring pytest infrastructure
tests/compare_directories.bash "$EXPECTEDDIR" "$OUTPUTDIR" "$TESTDESCRIPTION"
if [[ "$?" != "0" ]] ; then
    exit 0
fi

## since this is expected pass, enforce pytest functionality as a proxy for pytest configuration
pytest "$OUTPUTDIR/unit" > /dev/null 2>&1

if [[ "$?" != "0" ]] ; then
    echo "not ok - $TESTDESCRIPTION downstream pytest failed"
    exit 0
fi

## remove output
rm -Rf "$OUTPUTDIR"

## report success
echo "ok - $TESTDESCRIPTION"
